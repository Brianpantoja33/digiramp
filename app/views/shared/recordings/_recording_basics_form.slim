= transloadit :image_files_to_s3 
.row
  .col-sm-6
    - if super?
      = f.input :featured,  :input_html => { class: 'icheck-me', 'data-skin'.to_sym => "square", 'data-color'.to_sym => "blue"     }
    = f.input :title, autofocus:  true
    b Original file:
    =< recording.original_file_name
    br
    => link_to recording.download_url2 do
      .btn.btn-default
        i.fa.fa-cloud-download
        '&nbsp;Download
    
    = link_to edit_user_recording_upload_path(user, recording) do
       .btn.btn-default
         i.fa.fa-cloud-upload
         '&nbsp;Reaplace
         
    .row.pull-down-8
      .col-sm-6
        .fileinput.fileinput-new data-provides="fileinput"
          .fileinput-new.thumbnail style="width: 100px; height: 100px;"
            - if recording.cover_art
              = image_tag recording.cover_art, size: '184x184'
            - else
              = image_tag 'default-cover.jpg'
        
          div.fileinput-preview.fileinput-exists.thumbnail style="max-width: 100px; max-height: 100px;"
          div
            span.btn.btn-default.btn-file
              span class="fileinput-new"
                'Change image
              '&nbsp;
              span class="fileinput-exists"
                'Change
              = f.file_field :cover_art, multiple: false
        
            '&nbsp;
            a href="#" class="btn btn-default fileinput-exists" data-dismiss="fileinput"
              'Remove
      .col-sm-6.pull-down-8
        = f.input :position
    br
    br
    = f.input :sounds_like, :input_html => {  style: "height: 80px;", placeholder: "Beethoven, Elvis, Louis Armstrong"}
   
  .col-sm-6
 
    = f.input :privacy, collection: Recording::PRIVACY, include_blank: false,  label: 'Privacy', hint: 'Select who has access to this recording'

    = f.input :comment, :input_html => {  style: "height: 80px;", 
                                                  placeholder: "Text for small badges and invoice statements",
                                                  maxlength: "150"}, 
                                                  label: 'Info on badges'
    
    div id="textarea_feedback"
    br
    javascript:
      $(document).ready(function() {
          
          var text_max = 150;
          $('#textarea_feedback').html(text_max + ' characters remaining');
          update_textarea_feedback();
          $('#recording_comment').keyup(function() {
              update_textarea_feedback();
          });
          
          function update_textarea_feedback(){
            var text_length = $('#recording_comment').val().length;
            var text_remaining = text_max - text_length;

            $('#textarea_feedback').html(text_remaining + ' characters remaining');
          }
      });
      

    
    

    

    = f.input :downlodable, label: 'Downloadable', \
                            hint: 'Enabling this will allow the recording to be downloaded for free',  \
                            :input_html => { class: 'icheck-me', 'data-skin'.to_sym => "square", 'data-color'.to_sym => "blue"     }
    
    /= f.hidden_field :next_step, value: 'next_step', id: 'next_step'

.row
  .col-sm-12
    .pull-right  
      
      /=> f.submit 'Close', class: 'btn btn-default', data: { confirm: "Your changes will be saved and the wizard will close. Are you sure that's what you want?"  }
      /=> link_to 'Close', user_recording_path(@user, @recording), class: 'btn btn-default', data: { confirm: "Your changes will not be saved and the wizard will close. Are you sure that's what you want?"  }
      = f.submit  'Save', class: 'btn btn-primary'
      coffee:
        $("form#recording_artwork").submit ->
          $(this).find('input[type=submit]').attr('disabled', 'disabled')
          $(this).find('input[type=submit]').val "Updating, please wait ..."

= transloadit_jquerify :recording_artwork, :wait => true